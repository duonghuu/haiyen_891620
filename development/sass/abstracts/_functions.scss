// -----------------------------------------------------------------------------
// This file contains all application-wide Sass functions.
// -----------------------------------------------------------------------------

/// Native `url(..)` function wrapper
/// @param {String} $base - base URL for the asset
/// @param {String} $type - asset type folder (e.g. `fonts/`)
/// @param {String} $path - asset path
/// @return {Url}
@function asset($base, $type, $path) {
  @return url($base + $type + $path);
}

/// Returns URL to an image based on its path
/// @param {String} $path - image path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function image($path, $base: $base-url) {
  @return asset($base, 'images/', $path);
}

/// Returns URL to a font based on its path
/// @param {String} $path - font path
/// @param {String} $base [$base-url] - base URL
/// @return {Url}
/// @require $base-url
@function font($path, $base: $base-url) {
  @return asset($base, 'fonts/', $path);
}
/// margin: 0 -#{em(6)};
/// padding: 0 em(6);
@function em($pixels, $context: $browser-context) {
  @return #{$pixels/$context}em;
}

@function opacitator($color){
  $hi: 1;
  $lo: 0;
  $tol: 0.01;
  $rgbs: (red($color) green($color) blue($color));
  
  @while($hi - $lo > $tol){
    $m: $lo + (($hi - $lo) / 2);
    @if(getOpositesForOpacity($m, $rgbs, true)){
      $hi: $m;
    }
    @else{
      $lo: $m;
    }
  }
  $rgbs: getOpositesForOpacity($hi, $rgbs);
  @return rgba( nth($rgbs, 1), nth($rgbs, 2), nth($rgbs, 3), $hi);
}


@function getOpositesForOpacity($opacity, $rgbs, $returnValidity: false){
    $newList: ();
    $valid: true;
    @each $c in $rgbs{
      $newVal: oppositeForOpacity($opacity, $c);
      @if( $newVal >= 0 ){
         $newList: append($newList, $newVal);
      }
      @else{
        @return false; 
      }
    }
    @if($returnValidity ){
      @return $valid;
    }
    @else{
        @return $newList;
    }
}


@function oppositeForOpacity($opacity, $c){
    @return 255 - ( 255 - $c ) / $opacity;
}
